AWSTemplateFormatVersion: '2010-09-09'
Description: Event-Driven Data Processing Pipeline

Resources:
  RawDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: intershiprawbucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ReportsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: intershipreportbucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AndSNSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['s3:*']
                Resource: '*'
              - Effect: Allow
                Action: ['sns:Publish']
                Resource: '*'

  DataProcessorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ProcessCsvAndReport
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Code:
        ZipFile: |
          import boto3
          import os
          import csv
          import traceback

          def lambda_handler(event, context):
              s3 = boto3.client('s3')
              sns = boto3.client('sns')

              try:
                  bucket = event['Records'][0]['s3']['bucket']['name']
                  key = event['Records'][0]['s3']['object']['key']
                  print(f"Processing file: {key} from bucket: {bucket}")
              except Exception as e:
                  print("Could not find S3 info in event:", e)
                  print(traceback.format_exc())
                  return {"statusCode": 400, "body": "Bad S3 event data."}

              tmp_path = '/tmp/input.csv'
              try:
                  s3.download_file(bucket, key, tmp_path)
                  print(f"Downloaded file to {tmp_path}")
              except Exception as e:
                  print("Error downloading file from S3:", e)
                  print(traceback.format_exc())
                  return {"statusCode": 500, "body": "Failed to download file from S3."}

              try:
                  with open(tmp_path, newline='') as csvfile:
                      reader = csv.reader(csvfile)
                      header = next(reader, None)
                      row_count = sum(1 for row in reader)
                  print(f"Row count (excluding header): {row_count}")
              except Exception as e:
                  print("Error processing CSV file:", e)
                  print(traceback.format_exc())
                  return {"statusCode": 500, "body": "Failed to read/process CSV file."}

              summary = f"File '{key}' in bucket '{bucket}' has {row_count} data rows."
              report_bucket = os.environ.get('REPORT_BUCKET')
              report_key = key + '.report.txt'
              try:
                  if report_bucket:
                      s3.put_object(Bucket=report_bucket, Key=report_key, Body=summary)
                      print(f"Report uploaded as {report_key} to {report_bucket}")
                  else:
                      print("REPORT_BUCKET env var not set.")
              except Exception as e:
                  print("Error uploading report to S3:", e)
                  print(traceback.format_exc())

              sns_topic_arn = os.environ.get('SNS_TOPIC')
              print("SNS_TOPIC env:", sns_topic_arn)
              try:
                  if sns_topic_arn:
                      response = sns.publish(
                          TopicArn=sns_topic_arn,
                          Subject="S3 Data Processing Report",
                          Message=summary
                      )
                      print("SNS publish response:", response)
                  else:
                      print("SNS_TOPIC env var is missing or empty.")
              except Exception as e:
                  print("Error publishing to SNS:", e)
                  print(traceback.format_exc())

              return {
                  'statusCode': 200,
                  'body': f"Report saved as {report_key} and notification sent via SNS."
              }
      Environment:
        Variables:
          REPORT_BUCKET: intershipreportbucket  # Replace with your bucket name
          SNS_TOPIC: arn:aws:sns:ap-south-1:585768150044:intership  # SNS Topic ARN

  S3Notification:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DataProcessorLambda.Arn
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt RawDataBucket.Arn

  BucketNotification:
    Type: AWS::S3::Bucket
    DependsOn: S3Notification
    Properties:
      BucketName: my-raw-data-bucket-unique
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt DataProcessorLambda.Arn

  ReportsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: data-reports-topic

  DailyReportRule:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-report-rule
      ScheduleExpression: cron(0 0 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt DataProcessorLambda.Arn
          Id: daily-lambda-target

  EventBridgePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DataProcessorLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DailyReportRule.Arn

Outputs:
  LambdaFunctionArn:
    Value: !GetAtt DataProcessorLambda.Arn
  SNSTopicArn:
    Value: !Ref ReportsTopic
